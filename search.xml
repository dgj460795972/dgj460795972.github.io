<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>太原地铁</title>
    <url>/%E5%A4%AA%E5%8E%9F%E5%9C%B0%E9%93%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>太原从2009年开始筹备建设地铁，3年时间，2012年太原2号线一期工程设计启动，2016年，2号线工程全面开工建设，至2020年12月，地铁全面开通。从启动到开通运营，8年时光。</p>
<span id="more"></span>
<h2 id="2009"><a href="#2009" class="headerlink" title="2009"></a>2009</h2><p><strong>4月8日</strong> &emsp;太原市政府成立“太原市轨道交通建设领导组”<br><strong>11月2日</strong>   &emsp;市政府成立太原市轨道交通建设筹备处</p>
<h2 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h2><p><strong>12月1日</strong>  &emsp;太原市城市轨道交通线网规划获市政府批复<br><strong>12月31日</strong>   &emsp;山西省发改委向国家发改委上报《太原市城市轨道交通建设规划》</p>
<h2 id="2011"><a href="#2011" class="headerlink" title="2011"></a>2011</h2><p><strong>7月15日</strong>   &emsp;太原市政府常务会审议通过《太原市城市交通发展规划》<br><strong>12月31日</strong>  &emsp;山西省发改委向国家发改委上报《太原市城市轨道交通建设规划》</p>
<h2 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h2><p><strong>5月10日</strong>   &emsp;太原轨道交通发展有限公司成立<br><strong>6月18日</strong>   &emsp;太原市城市轨道交通近期建设规划获国家发改委批复<br><strong>12月17日</strong>   &emsp;2号线一期工程设计启动</p>
<h2 id="2013"><a href="#2013" class="headerlink" title="2013"></a>2013</h2><p><strong>8月2日</strong>   &emsp;2号线一期可行性研究报告获省发改委批复<br><strong>9月13日</strong>   &emsp;首开段（中心街西站及中心街西站—南中环街站区间）初步设计获省发改委批复<br><strong>11月2日</strong>   &emsp;首开段中心街西站开工建设</p>
<h2 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h2><p><strong>4月1日</strong>   &emsp;2号线一期工程初步设计获省发改委批复</p>
<h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><p><strong>3月15日</strong>   &emsp;2号线一期工程全线开工建设<br><strong>5月1日</strong>   &emsp;太原市城市轨道交通线网规划修编获市政府批复</p>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p><strong>4月22日</strong>   &emsp;首台盾构机“龙城一号”在中心街站始发</p>
<h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p><strong>2月28日</strong>   &emsp;全线实现“洞通”</p>
<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p><strong>7月16日</strong>   &emsp;太原中铁轨道交通建设运营有限公司成立<br><strong>8月12日</strong>   &emsp;车站主体结构全面封顶<br><strong>12月31日</strong>  &emsp; 全线实现“轨通”“电通”</p>
<h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><p><strong>5月4日</strong>   &emsp;首列车抵达贾家寨车辆基地<br><strong>9月1日</strong>   &emsp;开始空载试运行<br><strong>10月23日</strong>  &emsp; 初期运营行车方案通过评审<br><strong>11月1日</strong>   &emsp;按开通载客标准进入“跑图”模式<br><strong>12月6日</strong>   &emsp;太原市轨道交通2号线一期工程顺利通过竣工验收<br><strong>12月19日</strong>   &emsp;太原市轨道交通2号线一期工程通过初期运营前安全评估<br><strong>12月26日</strong>   &emsp;太原地铁2号线正式开通运营</p>
]]></content>
      <categories>
        <category>不停在路上</category>
        <category>太原</category>
        <category>太原地铁</category>
      </categories>
      <tags>
        <tag>不停</tag>
        <tag>太原地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议</title>
    <url>/TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>TCP，是一种可靠的、面向连接的<strong>字节流</strong>服务。通过<strong>序号</strong>对发送的数据报进行标记，同时对每个数据段进行<strong>确认</strong>。</p>
<span id="more"></span>
<h2 id="TCP报文首部格式"><a href="#TCP报文首部格式" class="headerlink" title="TCP报文首部格式"></a>TCP报文首部格式</h2><p><img src="http://blog.dingguojing.xyz/images/ruankao/tcp.png" alt="TCP"></p>
<h3 id="源端口和目的端口"><a href="#源端口和目的端口" class="headerlink" title="源端口和目的端口"></a>源端口和目的端口</h3><p>该字段均为16位，通过使用端口来标识源端和目的端的应用进程，比如Http，基于TCP协议，目的端端口为80.</p>
<h3 id="序列号和确认号"><a href="#序列号和确认号" class="headerlink" title="序列号和确认号"></a>序列号和确认号</h3><p>序列号是指每一个TCP报文段的序号，下一个TCP报文段的序号值等于上一个报文段序号加上该报文的长度。<br>确认号是指，发送端下一个报文段的第一个数据字段的序号。</p>
<h3 id="报头长度"><a href="#报头长度" class="headerlink" title="报头长度"></a>报头长度</h3><p>报头长度为4字节，32位。能取到最大值为15。为了保证报头长度是32位的倍数，所以TCP报头长度最多有60字节，没有任何选项的TCP报头长度为20字节。</p>
<h3 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h3><p>保留字段6字节，通常设置为0</p>
<h3 id="标记字段"><a href="#标记字段" class="headerlink" title="标记字段"></a>标记字段</h3><p>6个标记字段。</p>
<ul>
<li>URG，表示紧急指针，需要尽快传送</li>
<li>ACK，建立连接后的报文回应，设置为1</li>
<li>PSH, <strong>接收端</strong> 应用程序应该立即从TCP接收缓冲区中读走数据,交给上层协议。</li>
<li>RST，要求对方重新建立连接。</li>
<li>SYN，建立连接。</li>
<li>FIN，释放连接。</li>
</ul>
<h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>该字段用来进行流量控制，作为接收方让发送方设置其发送窗口的依据。告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p>
<h3 id="16位校验和"><a href="#16位校验和" class="headerlink" title="16位校验和"></a>16位校验和</h3><p>由 <strong>发送端</strong> 填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。</p>
<h3 id="16位紧急指针"><a href="#16位紧急指针" class="headerlink" title="16位紧急指针"></a>16位紧急指针</h3><p>是一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>该字段长度可变到40字节，为了保证TCP头部是32位的倍数，需要填充0</p>
<h2 id="TCP连接过程"><a href="#TCP连接过程" class="headerlink" title="TCP连接过程"></a>TCP连接过程</h2><blockquote>
<p>Tcp通过3次握手建立连接，双方通信之前均处于closed状态。</p>
</blockquote>
<p><img src="http://blog.dingguojing.xyz/images/ruankao/tcp_3.png" alt="3次握手"></p>
<h3 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h3><p>建立连接时，<strong>客户端发送</strong> syn包（SYN=1，seq=x）到服务器，并 <strong>进入SYN_SENT</strong> 状态，等待服务器确认；SYN：同步序列编号，若没有收到对方的应答，状态变为CLOSED。</p>
<h3 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h3><p>服务器收到syn包，必须确认客户的SYN（ACK=1，ack=x+1），同时自己也发送一个SYN包（SYN=1，seq=y），即SYN+ACK包，此时服务器 <strong>进入SYN_RECV</strong> 状态。</p>
<h3 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h3><p>客户端收到服务器的SYN+ACK包，进入 <strong>ESTABLISHED（TCP连接成功）状态</strong> ，向服务器回送确认包ACK(ack=y+1，ACK=1，seq=x+1），此包发送完毕，服务器进入 <strong>ESTABLISHED（TCP连接成功）状态</strong>，完成三次握手。</p>
<h2 id="TCP释放连接"><a href="#TCP释放连接" class="headerlink" title="TCP释放连接"></a>TCP释放连接</h2><blockquote>
<p>tcp释放连接分为四步，通信之前均处于ESTABLISHED状态</p>
</blockquote>
<p><img src="http://blog.dingguojing.xyz/images/ruankao/tcp_4.png" alt="tcp释放连接"></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>源主机发送释放报文（FIN=1，seq=x），源主机进入 <strong>FIN-WAIT</strong> 状态</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>目标主机接收报文发出确认报文（ACK=1，确认序号ack=x+1，自身序号seq=y），进入 <strong>CLOSE-WAIT</strong> 状态。这时候，源主机停止发送数据，目标主机仍然可以发送，TCP连接为半关闭状态（HALF-CLOSE）。源主机接收到ACK报文等待目标主机发出FIN报文，会持续一段时间。</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>目标主机，发出释放报文（FIN=1，ACK=x+1，seq=z），目标主机进入 <strong>LAST-ACK</strong> 状态。</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>源主机收到释放报文，发送确认报文（ACK=1，确认序号ACK=z+1，自身序号seq=x+1），等待一段时间后，源主机进入 <strong>CLOSED</strong> 状态</p>
]]></content>
      <categories>
        <category>软考</category>
        <category>传输层</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录</title>
    <url>/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8fd132cf874a350055ca0b4eb1254eb5b4ba69dee7d0c29bba21a42886760eb8">ba4ccabb47f4e111770a40fee985fbed8b4b0f4ef659bfb92af0245836181c5743ec088bbdd09246099f951da7be770443314b3672a30396bf1c145f5990ff6380997de24e805be1c4b88f0049740579cf82d877260be1db891fb457306aa26a14d149d3fc5106ecaee89c06f2ed75b0139f61e661640d0461bf9e97a11d01dc1db308d104f97b5bd7334e75ea4d76f349ae131f9d1786670837bfb43acf628dca7d0f249f403412281477f0648474b51d35c5f2d7c894b47b8f370d972a7efbf96516d4c2af24913e41de121bd58f3d6f9ce80932b10f99b7603c7cfd973cfb311c8b3b4b0b23d8c9b1af87636ee792a9193d7d72b23dbfcc30b4af9a14cd97b927a872b95198f2bdbd734100a61a815ab806ed4f269127f7e4d370f6e73ccca0ecda57dfefea5026571afa91b4b6cd8e6e2777feb3697907dd6029dfed655cdf8ef01d2732850248c6d7cfe14fce182af0565e926ad09373fda5ceba2b3bc281b83434916b3ffaf92c290a12087fdbf4568ae72125961acf639e7f2b3225afc2a02899932d06c40b219ae2579da5248902cdc0f4a2c9b0c9505ab9838f486ab46bfab160b57c15d29f3948855cd257b5ef35d11955d9cecafb06231103c60a36e0cbb18ab881055597b1ec7629e4a321f7cd772b0507250910b91e7083bcef3e104b4cd531d620555d4c871e7d5f20755fd2dc84deed9f7d3ad6e9e1af9c6bf36786d1dfb7080bc7eabfde024a3aed771648a57a9376410996ce9fbe1c3ef13f54c6f8df0c1df20bb4d364c0319f951952505e0f881db3535c89df866cb83d1488a69228d2c3a67398c1757d2178fdc888b487c5a32c7a6e0c10b856a79b55f78a51649cf1aa5de3a19f1f3e16a31aa9d166c8a7b6dc6fe7dcf23811b20708813e966ef3f739df8be24ddca0b2127d07a832f7973cf9cc950395c4401e8541e12450f47bb769e024dd66c7b77bf450466bfaa93cd19d42e1fb4000d68662dcf9b6642c54df9e4299a68b199d79153251f46b9bfb244dc7956efa32c0f42edc64a07f861a660ecdaaeb4c86ea7fcb6e426623b33fbe5b5e5a95e472ec7c76df7bf2f40eb512b11cdb731543a40dde90</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>不停</tag>
      </tags>
  </entry>
  <entry>
    <title>python能做什么</title>
    <url>/python%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>学习一门编程语言，首先我们要知道可以用他来做什么，他主要应用在哪些方面，大而全，系统的去了解，之后从某一方面侧重点的去规划自己的目标。python可以从以下几个大的方面去概括，归纳。</p>
<span id="more"></span>
<h2 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h2><p>python可以用来进行web开发，比如我们学习到的django框架、flask框架。国内的一些网站，知乎、豆瓣、饿了吗、美团以及搜狐，国外的YouTube视频等都是用python编写的。</p>
<h2 id="大数据处理"><a href="#大数据处理" class="headerlink" title="大数据处理"></a>大数据处理</h2><p>python可以进行数据分析，借助第三方的数据处理框架开发大数据处理平台，进行金融分析，量化交易处理。</p>
<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><p>python提供的标准支持库，可以从网页上爬到我们想要的数据，此外，python还有大量的爬虫框架，可以让我们去选择，获取网上的各种数据。</p>
<h2 id="自动运维开发"><a href="#自动运维开发" class="headerlink" title="自动运维开发"></a>自动运维开发</h2><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><h2 id="图形、图像处理"><a href="#图形、图像处理" class="headerlink" title="图形、图像处理"></a>图形、图像处理</h2><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python类中的方法</title>
    <url>/python%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>类，具有相同属性和行为的一类实体。类，具有属性和方法。python类中的方法有3类，实例方法、类方法、静态方法。</p>
<span id="more"></span>
<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>对象调用的话，自动绑定self参数。类调用的话，不会自动绑定，必须传入对象参数。</p>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>@classmethod，对象还是类调用，都会自动绑定参数。</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>@staticmethod，对象、类调用，都不会自动绑定参数。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础面试</title>
    <url>/python%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>python面试，实际就是对python知识掌握能力的一种鉴定。通过面试，可以更好的掌握自己学到的知识。</p>
<span id="more"></span>
<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import module # 导入模块</span><br><span class="line">from module import member # 从模块中导入某成员</span><br><span class="line">from module import *  # 从模块中导入所有的成员</span><br><span class="line">import module as m  # 增加别名的方式</span><br></pre></td></tr></table></figure>


<h2 id="设置python模块的搜索路径"><a href="#设置python模块的搜索路径" class="headerlink" title="设置python模块的搜索路径"></a>设置python模块的搜索路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置PYTHONPATN变量 PYTHONPATH = &#x27;path&#x27;</span><br><span class="line">通过sys.path临时设置python模块包的路径，sys.path.append(&#x27;path&#x27;)</span><br><span class="line">在python安装路径site-packages下增加一个后缀为.pth文件，增加为模块包的路径</span><br></pre></td></tr></table></figure>


<h2 id="字符串和变量的连接"><a href="#字符串和变量的连接" class="headerlink" title="字符串和变量的连接"></a>字符串和变量的连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 字符串和字符串的连接</span><br><span class="line">s1 = &#x27;hello&#x27;</span><br><span class="line">s2 = &#x27;world&#x27;</span><br><span class="line">s = s1 + s2   # 使用+号</span><br><span class="line">s = &#x27;hello&#x27;&#x27;world&#x27; # 直接连接</span><br><span class="line">s = print(s1, s2) # 使用print()函数</span><br><span class="line">s = &#x27;%s %s&#x27; % (s1, s2) # 格式化</span><br><span class="line">s = &#x27;&#x27;.join([s1, s2]) # 使用join</span><br><span class="line"># 通过格式化可以实现字符串和其他变量类型的连接，使用str()函数进行连接</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = 123</span><br><span class="line">n1 = 0b1101</span><br><span class="line">n2 = 0o723</span><br><span class="line">n3 = 0xabc</span><br><span class="line"># 进制转换函数</span><br><span class="line">bin()、oct()、hex()、int()四个函数</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python面试</category>
      </categories>
      <tags>
        <tag>python面试</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>python正则表达式，可以匹配任意类型的字符串，特别是在爬虫中的应用。</p>
<span id="more"></span>
<h2 id="单字符的匹配"><a href="#单字符的匹配" class="headerlink" title="单字符的匹配"></a>单字符的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配某个字符串，match只能从第一个字符开始匹配,返回一个match对象</span></span><br><span class="line"><span class="comment"># text = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment"># ret = re.match(&#x27;a&#x27;, text)</span></span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配任意字符(.),不能匹配&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># text = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment"># ret = re.match(&#x27;.&#x27;, text)</span></span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \d匹配任意的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \D匹配任意非数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \s匹配的是空白字符(\n,\t,\r\n window下换行,空格)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \S匹配的为非空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \w匹配的a-zA-Z,数字及下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \W匹配的和\w相反</span></span><br><span class="line">text = <span class="string">&#x27;+abc&#x27;</span></span><br><span class="line">ret = re.match(<span class="string">&#x27;\W&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># []组合的方式，只要满足括号内某一项就可以匹配成功</span></span><br></pre></td></tr></table></figure>
<h2 id="多字符的匹配"><a href="#多字符的匹配" class="headerlink" title="多字符的匹配"></a>多字符的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># * 匹配0个或多个字符</span></span><br><span class="line">text = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\w*&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># + 匹配一个或多个</span></span><br><span class="line"><span class="comment"># text = &#x27;+abc&#x27;</span></span><br><span class="line"><span class="comment"># result = re.match(&#x27;\w+&#x27;, text)</span></span><br><span class="line"><span class="comment"># print(result.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ？匹配0个或一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;m&#125; 匹配m个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;m,n&#125;匹配m-n之间个数的字符</span></span><br><span class="line">text = <span class="string">&#x27;3+2abc&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\w&#123;1,3&#125;&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>
<h2 id="开始和结束字符串的匹配"><a href="#开始和结束字符串的匹配" class="headerlink" title="开始和结束字符串的匹配"></a>开始和结束字符串的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 匹配开始字符</span></span><br><span class="line">text = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">result = re.search(<span class="string">&#x27;Wo&#x27;</span>, text)</span><br><span class="line"><span class="comment"># result1 = re.match(&#x27;Wo&#x27;, text)</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># print(result1.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $ 匹配结束字符</span></span><br><span class="line">text = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;Hello&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># | 匹配多个字符或表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪或者非贪婪</span></span><br><span class="line">text = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\d+?&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取html中标签</span></span><br><span class="line">text = <span class="string">&#x27;&lt;h1&gt;这是一个标题&lt;/h1&gt;&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;&lt;.+&gt;&#x27;</span>, text) <span class="comment"># 贪婪模式</span></span><br><span class="line"><span class="comment"># result = re.match(&#x27;&lt;.+?&gt;&#x27;, text) # 非贪婪模式</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证一个字符是不是0-100之间的数字 0 1 23 99</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"><span class="comment"># num = &#x27;25&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;0$|[1-9]\d?$|100$&#x27;</span>, num)</span><br><span class="line"><span class="comment"># print(type(result))</span></span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你输入的是1-100的数:&#x27;</span>, result.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你输入的不是1-100之间的数&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="转义字符和原生字符串的匹配"><a href="#转义字符和原生字符串的匹配" class="headerlink" title="转义字符和原生字符串的匹配"></a>转义字符和原生字符串的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># python中的转义字符,加\</span></span><br><span class="line">text = <span class="string">&#x27;Hello\\nWorld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则中的转义字符,加\</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = re.findall(<span class="string">&#x27;\$\d+&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生字符和正则表达式</span></span><br><span class="line"><span class="comment"># 先在python中解析，再在正则中解析</span></span><br><span class="line">s = <span class="string">&#x27;\cdac&#x27;</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;\\c&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>
<h2 id="分组、re模块常用函数"><a href="#分组、re模块常用函数" class="headerlink" title="分组、re模块常用函数"></a>分组、re模块常用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;.+(\$\d+).+(\$\d+)&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result.groups())</span><br><span class="line"></span><br><span class="line"><span class="comment"># group(0)或group()匹配整个字符串</span></span><br><span class="line"><span class="comment"># group(1)匹配第一个分组</span></span><br><span class="line"><span class="comment"># group(2)匹配第二个分组</span></span><br><span class="line"><span class="comment"># groups()匹配所有的分组</span></span><br><span class="line"><span class="comment"># findall()方法,返回的为一个列表</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = re.findall(<span class="string">r&#x27;\$\d+&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub()方法,替换规则</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = s.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># result = re.sub(r&#x27; |,&#x27;, &#x27;|&#x27;, s)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">result = re.sub(<span class="string">r&#x27;&lt;.+?&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, html)</span><br><span class="line"><span class="built_in">print</span>(result.strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给正则表达式加注释,使用compile函数编译正则规则</span></span><br><span class="line">s = <span class="string">&#x27;apple is 35.59&#x27;</span></span><br><span class="line">r = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\d+ # 匹配一个数字</span></span><br><span class="line"><span class="string">\.? # 匹配一个小数点</span></span><br><span class="line"><span class="string">\d* # 匹配小数部分</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, re.VERBOSE)</span><br><span class="line">result = re.search(r, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="验证可能要爬取得数据类型，手机号码、邮箱、身份证，url"><a href="#验证可能要爬取得数据类型，手机号码、邮箱、身份证，url" class="headerlink" title="验证可能要爬取得数据类型，手机号码、邮箱、身份证，url"></a>验证可能要爬取得数据类型，手机号码、邮箱、身份证，url</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 验证手机号码</span></span><br><span class="line">text = <span class="string">&#x27;133456789015&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;1[34578]\d&#123;9&#125;&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证邮箱</span></span><br><span class="line">text = <span class="string">&#x27;sdfsf@qq.com&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\w+@[a-z0-9]+\.[a-z]+&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证url，http、https、ftp</span></span><br><span class="line">text = <span class="string">&#x27;https://www.baidu.com/s?wd=compile&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;(https|http|ftp)://\S+&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证身份证</span></span><br><span class="line">text = <span class="string">&#x27;11234567891234567z&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\d&#123;17&#125;[\dxX]&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接数据库</title>
    <url>/python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>爬虫中储存数据的四种方式，有json，csv，excel，mysql数据库等方式。</p>
<span id="more"></span>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 连接数据库,参数有主机，端口，用户名，密码，数据表，编码方式,</span></span><br><span class="line">conn= pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, port=<span class="number">3306</span>, password=<span class="string">&#x27;password&#x27;</span>, database=<span class="string">&#x27;csdn_crawler&#x27;</span>)</span><br><span class="line">cusor = conn.cursor()</span><br></pre></td></tr></table></figure>
<h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询，增删改查通过cusor来操作</span></span><br><span class="line">sql = <span class="string">&#x27;select id, title from article&#x27;</span></span><br><span class="line">result = cusor.execute(sql)</span><br><span class="line">result = cusor.fetchone()</span><br><span class="line"><span class="comment"># result = cusor.fetchall()</span></span><br><span class="line"><span class="comment"># result = cusor.fetchmany(2)</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="插入数据库"><a href="#插入数据库" class="headerlink" title="插入数据库"></a>插入数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="comment"># sql = &quot;insert into article (id, title, content) values (null, &#x27;dgj&#x27;, &#x27;dgj zr&#x27;)&quot;</span></span><br><span class="line">sql = <span class="string">&quot;insert into article (id, title, content) values (null, %s, %s)&quot;</span></span><br><span class="line">title = <span class="string">&#x27;zr&#x27;</span></span><br><span class="line">content = <span class="string">&#x27;zr dgj&#x27;</span></span><br><span class="line">cusor.execute(sql, (title, content))</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">sql = <span class="string">&quot;delete from article where id = 1&quot;</span></span><br><span class="line">cusor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新数据库</span></span><br><span class="line">sql = <span class="string">&quot;update article set title=&#x27;丁梓翊&#x27; where id=2&quot;</span></span><br><span class="line">cusor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的json包</title>
    <url>/python%E4%B8%AD%E7%9A%84json%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>json本质类型为字符串，在python中，可以通过json包中dumps，dump，loads，load函数进行字符串和对象的相互转换</p>
<span id="more"></span>
<h2 id="json中dumps函数"><a href="#json中dumps函数" class="headerlink" title="json中dumps函数"></a>json中dumps函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#  Serialize ``obj`` to a JSON formatted ``str``.</span></span><br><span class="line">books = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&#x27;python讲义&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>: <span class="number">19</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;java讲义&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;price&#x27;</span>: <span class="number">222</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(books)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">result = json.dumps(books, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [&#123;&quot;name&quot;: &quot;python讲义&quot;, &quot;price&quot;: 19&#125;, &#123;&quot;name&quot;: &quot;java讲义&quot;, &quot;price&quot;: 222&#125;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(result)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="json中dump函数"><a href="#json中dump函数" class="headerlink" title="json中dump函数"></a>json中dump函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 python对象转化为json，并写入文件中</span></span><br><span class="line"><span class="comment">#   Serialize ``obj`` as a JSON formatted stream to ``fp``</span></span><br><span class="line">fp =  <span class="built_in">open</span>(<span class="string">&#x27;books.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(books, fp, ensure_ascii=<span class="literal">False</span>)  </span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>
<h2 id="json中loads函数"><a href="#json中loads函数" class="headerlink" title="json中loads函数"></a>json中loads函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将json字符串转为python对象</span></span><br><span class="line"><span class="comment">#  Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance containing a JSON document) to a Python object.</span></span><br><span class="line">json_str = <span class="string">&#x27;[&#123;&quot;name&quot;: &quot;python讲义&quot;, &quot;price&quot;: 19&#125;, &#123;&quot;name&quot;: &quot;java讲义&quot;, &quot;price&quot;: 222&#125;]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json.loads(json_str)))</span><br></pre></td></tr></table></figure>
<h2 id="json中的load函数"><a href="#json中的load函数" class="headerlink" title="json中的load函数"></a>json中的load函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># json中load函数将json文件转为python对象</span></span><br><span class="line"><span class="comment"># Deserialize ``fp`` (a ``.read()``-supporting file-like object containing</span></span><br><span class="line">    a JSON document) to a Python <span class="built_in">object</span>.</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;books.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">list</span> = json.load(fp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python Json</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Execl和CSV存储数据</title>
    <url>/Execl%E5%92%8CCSV%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>数据一般通过excel，csv方式存储，在python中如何使用excel，csv读取写入数据呢？</p>
<span id="more"></span>
<h2 id="读取python中csv模块"><a href="#读取python中csv模块" class="headerlink" title="读取python中csv模块"></a>读取python中csv模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"> <span class="comment"># 每一条数据为列表</span></span><br><span class="line"><span class="comment"># with open(&#x27;data.csv&#x27;, &#x27;r&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     reader = csv.reader(f)</span></span><br><span class="line"><span class="comment">#     for r in reader:</span></span><br><span class="line"><span class="comment">#         print(r[4])</span></span><br><span class="line"><span class="comment"># 获取的每一条数据为字典</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.DictReader(f)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>
<h2 id="写入csv数据"><a href="#写入csv数据" class="headerlink" title="写入csv数据"></a>写入csv数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">headers = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;height&#x27;</span>)</span><br><span class="line"><span class="comment"># students = [(&#x27;dgj&#x27;,23,1.8),(&#x27;zr&#x27;,21,1.7),(&#x27;dzy&#x27;,12,1.2)]</span></span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dgj&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">1.8</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zr&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">21</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">1.7</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dzy&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;height&#x27;</span>:<span class="number">1.2</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># with open(&#x27;students.csv&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;,newline=&#x27;&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     writer = csv.writer(f)</span></span><br><span class="line"><span class="comment">#     writer.writerow(headers)</span></span><br><span class="line"><span class="comment">#     writer.writerows(students)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;students.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f, headers)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(students)</span><br></pre></td></tr></table></figure>
<h2 id="使用python中的xlrd读取excel数据"><a href="#使用python中的xlrd读取excel数据" class="headerlink" title="使用python中的xlrd读取excel数据"></a>使用python中的xlrd读取excel数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd, xlwt</span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&#x27;210629.xls&#x27;</span>)</span><br><span class="line"><span class="comment"># # 获取所有sheet的名字</span></span><br><span class="line"><span class="comment"># sheet_names = workbook.sheet_names()</span></span><br><span class="line"><span class="comment"># print(sheet_names)</span></span><br><span class="line"><span class="comment"># # 通过索引获取sheet对象</span></span><br><span class="line"><span class="comment"># sheet = workbook.sheet_by_index(1)</span></span><br><span class="line"><span class="comment"># print(sheet.name)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sheet = workbook.sheet_by_name(&#x27;山西&#x27;)</span></span><br><span class="line"><span class="comment"># print(sheet.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sheets = workbook.sheets()</span></span><br><span class="line"><span class="comment"># print(sheets)</span></span><br><span class="line"><span class="comment"># for sheet in sheets:</span></span><br><span class="line"><span class="comment">#     print(sheet.name)</span></span><br><span class="line"><span class="comment"># 获取sheet</span></span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 获取cell</span></span><br><span class="line"><span class="comment"># cell的数据类型类型 xlrd.XL_CELL_TEXT、xlrd.XL_CELL_NUMBER、xlrd.XL_CELL_DATE、xlrd.XL_CELL_BOLEAN xlrd.XL_CELL_EMPTY</span></span><br><span class="line">cell = sheet.cell(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cell))</span><br><span class="line"><span class="built_in">print</span>(cell.ctype) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span> * <span class="number">30</span>)</span><br><span class="line">values = sheet.col_values(<span class="number">2</span>, <span class="number">1</span>, sheet.nrows)</span><br><span class="line"><span class="built_in">print</span>(values)</span><br></pre></td></tr></table></figure>
<h2 id="使用xlwt模块写入excel数据"><a href="#使用xlwt模块写入excel数据" class="headerlink" title="使用xlwt模块写入excel数据"></a>使用xlwt模块写入excel数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入xlwt模块，创建workbook对象，创建sheet对象，sheet.write方法写入，最后save保存</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 创建workbook</span></span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">sheet = workbook.add_sheet(<span class="string">&quot;sheet1&quot;</span>)</span><br><span class="line"><span class="comment"># 写入行头部</span></span><br><span class="line">headers = [<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;语文&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, header <span class="keyword">in</span> <span class="built_in">enumerate</span>(headers):</span><br><span class="line">    sheet.write(<span class="number">0</span>, index, header)</span><br><span class="line"><span class="comment"># 写入列头部</span></span><br><span class="line">names = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    sheet.write(index+<span class="number">1</span>, <span class="number">0</span>, name)</span><br><span class="line"><span class="comment"># 循环填入表数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        sheet.write(row, col, random.randint(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line">workbook.save(<span class="string">&#x27;成绩表.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="使用xlwt模块编辑excel文件"><a href="#使用xlwt模块编辑excel文件" class="headerlink" title="使用xlwt模块编辑excel文件"></a>使用xlwt模块编辑excel文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt,xlrd</span><br><span class="line"><span class="comment"># 读取某张表,</span></span><br><span class="line">rwk = xlrd.open_workbook(<span class="string">&#x27;成绩表.xls&#x27;</span>)</span><br><span class="line"><span class="comment"># 选取sheet</span></span><br><span class="line">rsheet = rwk.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 添加某一项</span></span><br><span class="line">rsheet.put_cell(<span class="number">0</span>, <span class="number">4</span>, xlrd.XL_CELL_TEXT, <span class="string">&quot;总分&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">nrows = rsheet.nrows</span><br><span class="line">ncols = rsheet.ncols</span><br><span class="line"><span class="built_in">print</span>(nrows, ncols)</span><br><span class="line"><span class="comment"># 获取某行某几列的值</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nrows):</span><br><span class="line">    grade = rsheet.row_values(row, <span class="number">1</span>, ncols)</span><br><span class="line">    <span class="comment"># print(grade)</span></span><br><span class="line">    total = <span class="built_in">sum</span>(grade)</span><br><span class="line">    <span class="comment"># print(total)</span></span><br><span class="line">    rsheet.put_cell(row, <span class="number">4</span>, xlrd.XL_CELL_NUMBER, total, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求平均分</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ncols):</span><br><span class="line">    grade = rsheet.col_values(col, <span class="number">1</span>, nrows)</span><br><span class="line">    avg = <span class="built_in">sum</span>(grade)/<span class="built_in">len</span>(grade)</span><br><span class="line">    <span class="built_in">print</span>(avg)</span><br><span class="line">    rsheet.put_cell(nrows, col, xlrd.XL_CELL_NUMBER, avg, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写到某个表中</span></span><br><span class="line">wwk = xlwt.Workbook()</span><br><span class="line">wsheet = wwk.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line"><span class="comment"># 因为添加的平均分这一行，所以得重新获取行数</span></span><br><span class="line">nrows = rsheet.nrows</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, nrows):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ncols):</span><br><span class="line">        wsheet.write(row, col, rsheet.cell_value(row, col))</span><br><span class="line"><span class="comment"># 保存表</span></span><br><span class="line">wwk.save(<span class="string">&#x27;abc.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>Execel</tag>
        <tag>CSV</tag>
      </tags>
  </entry>
  <entry>
    <title>pyhon生成器</title>
    <url>/pyhon%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>python装饰器</title>
    <url>/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>使用python装饰器，可以在不改变原来函数代码的前提下，给函数增加新的功能。可以给函数增加日志，增加权限。</p>
<span id="more"></span>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul>
<li>函数里面嵌套函数</li>
<li>外层函数返回内层函数的名字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fun1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;fun2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> fun2</span><br><span class="line"><span class="comment"># fun1() = fun2 如果想调用fun2，可以fun1()(),隐藏了内层函数的名字。</span></span><br></pre></td></tr></table></figure>

<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><ul>
<li>被装饰函数作为参数传递给装饰器函数</li>
<li>被装饰函数作为装饰函数的返回值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器函数fn</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> inner </span><br><span class="line"><span class="comment"># 被装饰函数带参数</span></span><br><span class="line"><span class="meta">@fn</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器函数带参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">w</span>(<span class="params">f</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">            <span class="keyword">if</span> args == <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;验证1&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            	<span class="built_in">print</span>(<span class="string">&#x27;验证2&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;inner函数&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"><span class="meta">@fn(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fun2&#x27;</span>)</span><br><span class="line"><span class="meta">@fn(<span class="params"><span class="number">2</span></span>)    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fun3&#x27;</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>urllib和requests库的使用</title>
    <url>/urllib%E5%92%8Crequests%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>pip设置永久国内镜像源</title>
    <url>/pip%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-创建pip文件"><a href="#1-创建pip文件" class="headerlink" title="1. 创建pip文件"></a>1. 创建pip文件</h2><ul>
<li><strong>win+r</strong>，输入 <strong>%appdata%</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\dell\AppData\Roaming</span><br></pre></td></tr></table></figure>

<ul>
<li>新建pip文件夹</li>
<li>在文件夹中编辑pip.ini文件</li>
</ul>
<h2 id="2-编辑pip-ini文件，保存"><a href="#2-编辑pip-ini文件，保存" class="headerlink" title="2. 编辑pip.ini文件，保存"></a>2. 编辑pip.ini文件，保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">timeout = <span class="number">6000</span></span><br><span class="line">index_url = https://pypi.doubanio.com/simple</span><br><span class="line">trusted-host = pypi.doubanio.com</span><br></pre></td></tr></table></figure>

<h2 id="3-更改mkvirtualenv生成虚拟环境目录"><a href="#3-更改mkvirtualenv生成虚拟环境目录" class="headerlink" title="3. 更改mkvirtualenv生成虚拟环境目录"></a>3. 更改mkvirtualenv生成虚拟环境目录</h2><ul>
<li>在环境变量中编辑<strong>WORKON_HOME</strong>变量</li>
<li>设置自己虚拟环境的生成目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\Virtualenv</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>django框架</title>
    <url>/django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>框架的学习，可以让我们更便捷的开发一个网站。目前，python框架使用最多的是Django框架和Flask框架。</p>
<span id="more"></span>

<h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><h3 id="Django框架的特点"><a href="#Django框架的特点" class="headerlink" title="Django框架的特点"></a>Django框架的特点</h3><ol>
<li>创建一个应用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin startproject dgj</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建子应用并注册</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manager.py startapp users</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dzy.apps.DzyConfig&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在视图下编辑业务代码，并注册路由</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dzy.views <span class="keyword">import</span> index</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>时区、语言的配置</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TIME_ZONE = &#x27;UTC&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>静态文件的配置</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"><span class="comment"># 静态文件的位置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;static_files&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>路由的配置</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在路由配置里面，增加函数视图，增加类视图，增加应用配置视图</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;dzy/&#x27;</span>, include(<span class="string">&#x27;dzy.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>请求和响应</li>
</ol>
<ul>
<li>url请求参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>提取url特定部分，比如/weather/beijing/<span class="number">2021</span> <span class="string">r&#x27;^weather/(?P&lt;city&gt;[a-z]+)/(?P&lt;year&gt;\d&#123;4&#125;)/$&#x27;</span></span><br><span class="line"><span class="number">2.</span>查询字符串(query string),key1=value1&amp;key2=value2 request.method</span><br><span class="line"><span class="number">3.</span>请求体(body)中数据，json, request.body</span><br><span class="line"><span class="number">4.</span>http中报文头(header),User-Agent,Referer request.META</span><br></pre></td></tr></table></figure>

<ul>
<li>HttpResponse</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    json_str = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;dgj&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;django2009&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># redirect()</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(json_str)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>cookie和session</li>
</ol>
<ul>
<li>cookie</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cookieview</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    res = HttpResponse(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">    res.set_cookie(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;dgj&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readcookie</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.COOKIES.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;读取成功&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>session</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setsession</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    request.session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;dgj&#x27;</span></span><br><span class="line">    request.session[<span class="string">&#x27;age&#x27;</span>] = <span class="number">20</span></span><br><span class="line">    <span class="comment"># 设置session保存时间</span></span><br><span class="line">    request.session.set_expiry(<span class="number">120</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;OK&quot;</span>)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>类视图和中间件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求之前，响应之后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_middleware</span>(<span class="params">get_response</span>):</span></span><br><span class="line">    <span class="comment"># 此处编写的代码仅在Django第一次配置和初始化的时候执行一次。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleware</span>(<span class="params">request</span>):</span></span><br><span class="line">        <span class="comment"># 此处编写的代码会在每个请求处理视图前被调用。</span></span><br><span class="line"></span><br><span class="line">        response = get_response(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此处编写的代码会在每个请求处理视图之后被调用。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> middleware</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>文件上传</li>
</ol>
<p>在模板中 创建一个form表单 需要特别注意的是，在有文件上传的表单中，method的属性必须是post 而且必须指定他的enctype为“multipart/form-data” 表明不对字符进行编码，具体的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/upload/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    文件上传：&lt;input type=&quot;file&quot; name=&quot;files&quot; class=&quot;file_up&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>.read() 从文件读取整个上传的数据，这个方法只适合小文件</p>
<p>chunks() 按块返回文件，通过在for循环中进行迭代，可以将大文件按块写入到服务器中</p>
<p>multiple_chunks() 这个方法根据文件对象的大小，返回True或者False当文件大于2.5M(默认为2.5M，可以调整)时，该方法返回True,否则返回False因此可以根据该方法来选择选用read方法读取还是采用chunks方法。</p>
<p>文件对象.name 这是个属性 不是方法 该属性得到上传的文件名 包括后缀如weizi.py</p>
<p>文件对象.size 这个也是个属性，得到上传文件的大小。</p>
<ol start="11">
<li>template</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模板渲染</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    context=&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>数据库</li>
</ol>
<ul>
<li>关联查询，一对多</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> book.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = BookInfo.objects.get(<span class="built_in">id</span>=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&lt;BookInfo: 天龙八部&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.heroinfo_set.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet [&lt;HeroInfo: 乔峰&gt;, &lt;HeroInfo: 段誉&gt;, &lt;HeroInfo: 虚竹&gt;, &lt;HeroInfo: 王语嫣&gt;]&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>多对一的查询，直接查询外键</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = HeroInfo.objects.get(<span class="built_in">id</span>=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h</span><br><span class="line">&lt;HeroInfo: 黄蓉&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h.hbook</span><br><span class="line">&lt;BookInfo: 射雕英雄传&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象修改，需要使用save方法保存</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = HeroInfo.objects.get(pk=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h</span><br><span class="line">&lt;HeroInfo: 黄蓉&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h.hname = <span class="string">&#x27;蓉妹妹&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类对象修改，精确查找没有update方法，使用filter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> book.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HeroInfo.objects.get(<span class="built_in">id</span>=<span class="number">2</span>).update(hname=<span class="string">&#x27;黄蓉&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;console&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;HeroInfo&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;update&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HeroInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">2</span>).update(hname=<span class="string">&#x27;黄蓉&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在视图里进行orm操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    book_list = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        book_query = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="built_in">print</span>(book_query)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> book_query:</span><br><span class="line">            book_dict = &#123;&#125;</span><br><span class="line">            book_dict[<span class="string">&#x27;title&#x27;</span>] = book.btitle</span><br><span class="line">            book_dict[<span class="string">&#x27;bpub_date&#x27;</span>] = book.bpub_date</span><br><span class="line">            book_list.append(book_dict)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(book_list)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(book_list, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
        <category>python框架</category>
        <category>django框架</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django下admin站点</title>
    <url>/django%E4%B8%8Badmin%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>django自带admin站点。</p>
<span id="more"></span>

<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manager.py createsuperuser</span><br></pre></td></tr></table></figure>

<h2 id="在admin-py下进行配置"><a href="#在admin-py下进行配置" class="headerlink" title="在admin.py下进行配置"></a>在admin.py下进行配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册后台数据模型的两种方式</span></span><br><span class="line"><span class="keyword">from</span> book.models <span class="keyword">import</span> BookInfo, HeroInfo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;btitle&#x27;</span>,<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;bread&#x27;</span>,<span class="string">&#x27;bpub_date&#x27;</span>,<span class="string">&#x27;is_delete&#x27;</span>] <span class="comment"># 数据列展示</span></span><br><span class="line">    actions_on_bottom = <span class="literal">True</span></span><br><span class="line">    actions_on_top = <span class="literal">False</span> <span class="comment"># 设置表操作方式</span></span><br><span class="line">    fields = [<span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>,<span class="string">&#x27;bpub_date&#x27;</span>]<span class="comment"># 数据编辑显示</span></span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="string">&#x27;基本&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_date&#x27;</span>]&#125;),</span><br><span class="line">        (<span class="string">&#x27;高级&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;classes&#x27;</span>: (<span class="string">&#x27;collapse&#x27;</span>,)  <span class="comment"># 是否折叠显示</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">HeroInfo</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;hbook&#x27;</span>,<span class="string">&#x27;hname&#x27;</span>,<span class="string">&#x27;hgender&#x27;</span>,<span class="string">&#x27;hcomment&#x27;</span>,<span class="string">&#x27;is_delete&#x27;</span>]</span><br><span class="line">    list_per_page = <span class="number">5</span> <span class="comment"># 设置分页</span></span><br><span class="line"></span><br><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br><span class="line"><span class="comment"># admin.site.register(HeroInfo, HeroInfoAdmin)</span></span><br></pre></td></tr></table></figure>

<h2 id="关联对象，一对多下的数据展示页面"><a href="#关联对象，一对多下的数据展示页面" class="headerlink" title="关联对象，一对多下的数据展示页面"></a>关联对象，一对多下的数据展示页面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoStackInline</span>(<span class="params">admin.StackedInline</span>):</span></span><br><span class="line">    <span class="comment"># 块展示</span></span><br><span class="line">    model = HeroInfo  <span class="comment"># 要编辑的对象</span></span><br><span class="line">    extra = <span class="number">1</span>  <span class="comment"># 附加编辑的数量</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoTabularInline</span>(<span class="params">admin.TabularInline</span>):</span></span><br><span class="line">    <span class="comment"># 表格展示</span></span><br><span class="line">    model = HeroInfo</span><br><span class="line">    extra = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    inlines = [HeroInfoStackInline]<span class="comment">#调用</span></span><br></pre></td></tr></table></figure>

<h2 id="设置站点信息的展示"><a href="#设置站点信息的展示" class="headerlink" title="设置站点信息的展示"></a>设置站点信息的展示</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">admin.site.site_header 设置网站页头</span><br><span class="line">admin.site.site_title 设置页面标题</span><br><span class="line">admin.site.index_title 设置首页标语</span><br></pre></td></tr></table></figure>

<h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">&#x27;books&#x27;</span>, verbose_name=<span class="string">&#x27;图片封面&#x27;</span>, null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>python框架</category>
        <category>django框架</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中drf使用</title>
    <url>/django%E4%B8%ADdrf%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>通过drf框架写一个用户注册的示例</p>
<span id="more"></span>

<h2 id="建立用户数据模型"><a href="#建立用户数据模型" class="headerlink" title="建立用户数据模型"></a>建立用户数据模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, verbose_name=<span class="string">&#x27;手机&#x27;</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&#x27;密码&#x27;</span>, max_length=<span class="number">11</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;tb_users&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;用户表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>

<h2 id="创建视图模型"><a href="#创建视图模型" class="headerlink" title="创建视图模型"></a>创建视图模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegView</span>(<span class="params">CreateAPIView, ListAPIView</span>):</span></span><br><span class="line">    serializer_class = UserInfoSerializer</span><br><span class="line">    queryset = UserInfo.objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<h2 id="建立路由"><a href="#建立路由" class="headerlink" title="建立路由"></a>建立路由</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># re_path(r&#x27;^$&#x27;, views.index),</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^reg/$&#x27;</span>, views.RegView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="在视图模型中引入drf框架，引入序列化类，并做数据验证"><a href="#在视图模型中引入drf框架，引入序列化类，并做数据验证" class="headerlink" title="在视图模型中引入drf框架，引入序列化类，并做数据验证"></a>在视图模型中引入drf框架，引入序列化类，并做数据验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    password2 = serializers.CharField(label=<span class="string">&quot;重复密码&quot;</span>, max_length=<span class="number">11</span>, write_only=<span class="literal">True</span>)</span><br><span class="line">    password = serializers.CharField(label=<span class="string">&quot;密码&quot;</span>, max_length=<span class="number">11</span>, write_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserInfo</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;mobile&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;password2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_mobile</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, value):</span><br><span class="line">            <span class="built_in">print</span>(value)</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;手机号码不对&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;password2&#x27;</span>] != data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;两次输入密码不一致&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(validated_data)</span><br><span class="line">        <span class="keyword">del</span> validated_data[<span class="string">&#x27;password2&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(validated_data)</span><br><span class="line">        user = UserInfo.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>python框架</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
</search>
