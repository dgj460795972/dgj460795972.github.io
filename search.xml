<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>太原地铁</title>
    <url>/%E5%A4%AA%E5%8E%9F%E5%9C%B0%E9%93%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>太原从2009年开始筹备建设地铁，3年时间，2012年太原2号线一期工程设计启动，2016年，2号线工程全面开工建设，至2020年12月，地铁全面开通。从启动到开通运营，8年时光。</p>
<span id="more"></span>
<h2 id="2009"><a href="#2009" class="headerlink" title="2009"></a>2009</h2><p><strong>4月8日</strong> &emsp;太原市政府成立“太原市轨道交通建设领导组”<br><strong>11月2日</strong>   &emsp;市政府成立太原市轨道交通建设筹备处</p>
<h2 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h2><p><strong>12月1日</strong>  &emsp;太原市城市轨道交通线网规划获市政府批复<br><strong>12月31日</strong>   &emsp;山西省发改委向国家发改委上报《太原市城市轨道交通建设规划》</p>
<h2 id="2011"><a href="#2011" class="headerlink" title="2011"></a>2011</h2><p><strong>7月15日</strong>   &emsp;太原市政府常务会审议通过《太原市城市交通发展规划》<br><strong>12月31日</strong>  &emsp;山西省发改委向国家发改委上报《太原市城市轨道交通建设规划》</p>
<h2 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h2><p><strong>5月10日</strong>   &emsp;太原轨道交通发展有限公司成立<br><strong>6月18日</strong>   &emsp;太原市城市轨道交通近期建设规划获国家发改委批复<br><strong>12月17日</strong>   &emsp;2号线一期工程设计启动</p>
<h2 id="2013"><a href="#2013" class="headerlink" title="2013"></a>2013</h2><p><strong>8月2日</strong>   &emsp;2号线一期可行性研究报告获省发改委批复<br><strong>9月13日</strong>   &emsp;首开段（中心街西站及中心街西站—南中环街站区间）初步设计获省发改委批复<br><strong>11月2日</strong>   &emsp;首开段中心街西站开工建设</p>
<h2 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h2><p><strong>4月1日</strong>   &emsp;2号线一期工程初步设计获省发改委批复</p>
<h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><p><strong>3月15日</strong>   &emsp;2号线一期工程全线开工建设<br><strong>5月1日</strong>   &emsp;太原市城市轨道交通线网规划修编获市政府批复</p>
<h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><p><strong>4月22日</strong>   &emsp;首台盾构机“龙城一号”在中心街站始发</p>
<h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><p><strong>2月28日</strong>   &emsp;全线实现“洞通”</p>
<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p><strong>7月16日</strong>   &emsp;太原中铁轨道交通建设运营有限公司成立<br><strong>8月12日</strong>   &emsp;车站主体结构全面封顶<br><strong>12月31日</strong>  &emsp; 全线实现“轨通”“电通”</p>
<h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><p><strong>5月4日</strong>   &emsp;首列车抵达贾家寨车辆基地<br><strong>9月1日</strong>   &emsp;开始空载试运行<br><strong>10月23日</strong>  &emsp; 初期运营行车方案通过评审<br><strong>11月1日</strong>   &emsp;按开通载客标准进入“跑图”模式<br><strong>12月6日</strong>   &emsp;太原市轨道交通2号线一期工程顺利通过竣工验收<br><strong>12月19日</strong>   &emsp;太原市轨道交通2号线一期工程通过初期运营前安全评估<br><strong>12月26日</strong>   &emsp;太原地铁2号线正式开通运营</p>
]]></content>
      <categories>
        <category>不停在路上</category>
        <category>太原</category>
        <category>太原地铁</category>
      </categories>
      <tags>
        <tag>不停</tag>
        <tag>太原地铁</tag>
      </tags>
  </entry>
  <entry>
    <title>python框架</title>
    <url>/python%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>框架的学习，可以让我们更便捷的开发一个网站。目前，python框架使用最多的是Django框架和Flask框架。</p>
<span id="more"></span>
<h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><h2 id="Flask框架"><a href="#Flask框架" class="headerlink" title="Flask框架"></a>Flask框架</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议</title>
    <url>/TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>TCP，是一种可靠的、面向连接的<strong>字节流</strong>服务。通过<strong>序号</strong>对发送的数据报进行标记，同时对每个数据段进行<strong>确认</strong>。</p>
<span id="more"></span>
<h2 id="TCP报文首部格式"><a href="#TCP报文首部格式" class="headerlink" title="TCP报文首部格式"></a>TCP报文首部格式</h2><p><img src="http://blog.dingguojing.xyz/images/ruankao/tcp.png" alt="TCP"></p>
<h3 id="源端口和目的端口"><a href="#源端口和目的端口" class="headerlink" title="源端口和目的端口"></a>源端口和目的端口</h3><p>该字段均为16位，通过使用端口来标识源端和目的端的应用进程，比如Http，基于TCP协议，目的端端口为80.</p>
<h3 id="序列号和确认号"><a href="#序列号和确认号" class="headerlink" title="序列号和确认号"></a>序列号和确认号</h3><p>序列号是指每一个TCP报文段的序号，下一个TCP报文段的序号值等于上一个报文段序号加上该报文的长度。<br>确认号是指，发送端下一个报文段的第一个数据字段的序号。</p>
<h3 id="报头长度"><a href="#报头长度" class="headerlink" title="报头长度"></a>报头长度</h3><p>报头长度为4字节，32位。能取到最大值为15。为了保证报头长度是32位的倍数，所以TCP报头长度最多有60字节，没有任何选项的TCP报头长度为20字节。</p>
<h3 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h3><p>保留字段6字节，通常设置为0</p>
<h3 id="标记字段"><a href="#标记字段" class="headerlink" title="标记字段"></a>标记字段</h3><p>6个标记字段。</p>
<ul>
<li>URG，表示紧急指针，需要尽快传送</li>
<li>ACK，建立连接后的报文回应，设置为1</li>
<li>PSH, <strong>接收端</strong> 应用程序应该立即从TCP接收缓冲区中读走数据,交给上层协议。</li>
<li>RST，要求对方重新建立连接。</li>
<li>SYN，建立连接。</li>
<li>FIN，释放连接。</li>
</ul>
<h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>该字段用来进行流量控制，作为接收方让发送方设置其发送窗口的依据。告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。</p>
<h3 id="16位校验和"><a href="#16位校验和" class="headerlink" title="16位校验和"></a>16位校验和</h3><p>由 <strong>发送端</strong> 填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。</p>
<h3 id="16位紧急指针"><a href="#16位紧急指针" class="headerlink" title="16位紧急指针"></a>16位紧急指针</h3><p>是一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>该字段长度可变到40字节，为了保证TCP头部是32位的倍数，需要填充0</p>
<h2 id="TCP连接过程"><a href="#TCP连接过程" class="headerlink" title="TCP连接过程"></a>TCP连接过程</h2><blockquote>
<p>Tcp通过3次握手建立连接，双方通信之前均处于closed状态。</p>
</blockquote>
<p><img src="http://blog.dingguojing.xyz/images/ruankao/tcp_3.png" alt="3次握手"></p>
<h3 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h3><p>建立连接时，<strong>客户端发送</strong> syn包（SYN=1，seq=x）到服务器，并 <strong>进入SYN_SENT</strong> 状态，等待服务器确认；SYN：同步序列编号，若没有收到对方的应答，状态变为CLOSED。</p>
<h3 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h3><p>服务器收到syn包，必须确认客户的SYN（ACK=1，ack=x+1），同时自己也发送一个SYN包（SYN=1，seq=y），即SYN+ACK包，此时服务器 <strong>进入SYN_RECV</strong> 状态。</p>
<h3 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h3><p>客户端收到服务器的SYN+ACK包，进入 <strong>ESTABLISHED（TCP连接成功）状态</strong> ，向服务器回送确认包ACK(ack=y+1，ACK=1，seq=x+1），此包发送完毕，服务器进入 <strong>ESTABLISHED（TCP连接成功）状态</strong>，完成三次握手。</p>
<h2 id="TCP释放连接"><a href="#TCP释放连接" class="headerlink" title="TCP释放连接"></a>TCP释放连接</h2><blockquote>
<p>tcp释放连接分为四步，通信之前均处于ESTABLISHED状态</p>
</blockquote>
<p><img src="http://blog.dingguojing.xyz/images/ruankao/tcp_4.png" alt="tcp释放连接"></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>源主机发送释放报文（FIN=1，seq=x），源主机进入 <strong>FIN-WAIT</strong> 状态</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>目标主机接收报文发出确认报文（ACK=1，确认序号ack=x+1，自身序号seq=y），进入 <strong>CLOSE-WAIT</strong> 状态。这时候，源主机停止发送数据，目标主机仍然可以发送，TCP连接为半关闭状态（HALF-CLOSE）。源主机接收到ACK报文等待目标主机发出FIN报文，会持续一段时间。</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>目标主机，发出释放报文（FIN=1，ACK=x+1，seq=z），目标主机进入 <strong>LAST-ACK</strong> 状态。</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>源主机收到释放报文，发送确认报文（ACK=1，确认序号ACK=z+1，自身序号seq=x+1），等待一段时间后，源主机进入 <strong>CLOSED</strong> 状态</p>
]]></content>
      <categories>
        <category>软考</category>
        <category>传输层</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录</title>
    <url>/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8fd132cf874a350055ca0b4eb1254eb5b4ba69dee7d0c29bba21a42886760eb8">ba4ccabb47f4e111770a40fee985fbed8b4b0f4ef659bfb92af0245836181c5743ec088bbdd09246099f951da7be770443314b3672a30396bf1c145f5990ff6380997de24e805be1c4b88f0049740579cf82d877260be1db891fb457306aa26a14d149d3fc5106ecaee89c06f2ed75b0139f61e661640d0461bf9e97a11d01dc1db308d104f97b5bd7334e75ea4d76f349ae131f9d1786670837bfb43acf628dca7d0f249f403412281477f0648474b51d35c5f2d7c894b47b8f370d972a7efbf96516d4c2af24913e41de121bd58f3d6f9ce80932b10f99b7603c7cfd973cfb311c8b3b4b0b23d8c9b1af87636ee792a9193d7d72b23dbfcc30b4af9a14cd97b927a872b95198f2bdbd734100a61a815ab806ed4f269127f7e4d370f6e73ccca0ecda57dfefea5026571afa91b4b6cd8e6e2777feb3697907dd6029dfed655cdf8ef01d2732850248c6d7cfe14fce182af0565e926ad09373fda5ceba2b3bc281b83434916b3ffaf92c290a12087fdbf4568ae72125961acf639e7f2b3225afc2a02899932d06c40b219ae2579da5248902cdc0f4a2c9b0c9505ab9838f486ab46bfab160b57c15d29f3948855cd257b5ef35d11955d9cecafb06231103c60a36e0cbb18ab881055597b1ec7629e4a321f7cd772b0507250910b91e7083bcef3e104b4cd531d620555d4c871e7d5f20755fd2dc84deed9f7d3ad6e9e1af9c6bf36786d1dfb7080bc7eabfde024a3aed771648a57a9376410996ce9fbe1c3ef13f54c6f8df0c1df20bb4d364c0319f951952505e0f881db3535c89df866cb83d1488a69228d2c3a67398c1757d2178fdc888b487c5a32c7a6e0c10b856a79b55f78a51649cf1aa5de3a19f1f3e16a31aa9d166c8a7b6dc6fe7dcf23811b20708813e966ef3f739df8be24ddca0b2127d07a832f7973cf9cc950395c4401e8541e12450f47bb769e024dd66c7b77bf450466bfaa93cd19d42e1fb4000d68662dcf9b6642c54df9e4299a68b199d79153251f46b9bfb244dc7956efa32c0f42edc64a07f861a660ecdaaeb4c86ea7fcb6e426623b33fbe5b5e5a95e472ec7c76df7bf2f40eb512b11cdb731543a40dde90</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>不停</tag>
      </tags>
  </entry>
  <entry>
    <title>python能做什么</title>
    <url>/python%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>学习一门编程语言，首先我们要知道可以用他来做什么，他主要应用在哪些方面，大而全，系统的去了解，之后从某一方面侧重点的去规划自己的目标。python可以从以下几个大的方面去概括，归纳。</p>
<span id="more"></span>
<h2 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h2><p>python可以用来进行web开发，比如我们学习到的django框架、flask框架。国内的一些网站，知乎、豆瓣、饿了吗、美团以及搜狐，国外的YouTube视频等都是用python编写的。</p>
<h2 id="大数据处理"><a href="#大数据处理" class="headerlink" title="大数据处理"></a>大数据处理</h2><p>python可以进行数据分析，借助第三方的数据处理框架开发大数据处理平台，进行金融分析，量化交易处理。</p>
<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><p>python提供的标准支持库，可以从网页上爬到我们想要的数据，此外，python还有大量的爬虫框架，可以让我们去选择，获取网上的各种数据。</p>
<h2 id="自动运维开发"><a href="#自动运维开发" class="headerlink" title="自动运维开发"></a>自动运维开发</h2><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><h2 id="图形、图像处理"><a href="#图形、图像处理" class="headerlink" title="图形、图像处理"></a>图形、图像处理</h2><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python类中的方法</title>
    <url>/python%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>类，具有相同属性和行为的一类实体。类，具有属性和方法。python类中的方法有3类，实例方法、类方法、静态方法。</p>
<span id="more"></span>
<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>对象调用的话，自动绑定self参数。类调用的话，不会自动绑定，必须传入对象参数。</p>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>@classmethod，对象还是类调用，都会自动绑定参数。</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>@staticmethod，对象、类调用，都不会自动绑定参数。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础面试</title>
    <url>/python%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>python面试，实际就是对python知识掌握能力的一种鉴定。通过面试，可以更好的掌握自己学到的知识。</p>
<span id="more"></span>
<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import module # 导入模块</span><br><span class="line">from module import member # 从模块中导入某成员</span><br><span class="line">from module import *  # 从模块中导入所有的成员</span><br><span class="line">import module as m  # 增加别名的方式</span><br></pre></td></tr></table></figure>


<h2 id="设置python模块的搜索路径"><a href="#设置python模块的搜索路径" class="headerlink" title="设置python模块的搜索路径"></a>设置python模块的搜索路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置PYTHONPATN变量 PYTHONPATH = &#x27;path&#x27;</span><br><span class="line">通过sys.path临时设置python模块包的路径，sys.path.append(&#x27;path&#x27;)</span><br><span class="line">在python安装路径site-packages下增加一个后缀为.pth文件，增加为模块包的路径</span><br></pre></td></tr></table></figure>


<h2 id="字符串和变量的连接"><a href="#字符串和变量的连接" class="headerlink" title="字符串和变量的连接"></a>字符串和变量的连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 字符串和字符串的连接</span><br><span class="line">s1 = &#x27;hello&#x27;</span><br><span class="line">s2 = &#x27;world&#x27;</span><br><span class="line">s = s1 + s2   # 使用+号</span><br><span class="line">s = &#x27;hello&#x27;&#x27;world&#x27; # 直接连接</span><br><span class="line">s = print(s1, s2) # 使用print()函数</span><br><span class="line">s = &#x27;%s %s&#x27; % (s1, s2) # 格式化</span><br><span class="line">s = &#x27;&#x27;.join([s1, s2]) # 使用join</span><br><span class="line"># 通过格式化可以实现字符串和其他变量类型的连接，使用str()函数进行连接</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="进制之间的转换"><a href="#进制之间的转换" class="headerlink" title="进制之间的转换"></a>进制之间的转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = 123</span><br><span class="line">n1 = 0b1101</span><br><span class="line">n2 = 0o723</span><br><span class="line">n3 = 0xabc</span><br><span class="line"># 进制转换函数</span><br><span class="line">bin()、oct()、hex()、int()四个函数</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python面试</category>
      </categories>
      <tags>
        <tag>python面试</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>python正则表达式，可以匹配任意类型的字符串，特别是在爬虫中的应用。</p>
<span id="more"></span>
<h2 id="单字符的匹配"><a href="#单字符的匹配" class="headerlink" title="单字符的匹配"></a>单字符的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配某个字符串，match只能从第一个字符开始匹配,返回一个match对象</span></span><br><span class="line"><span class="comment"># text = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment"># ret = re.match(&#x27;a&#x27;, text)</span></span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配任意字符(.),不能匹配&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># text = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment"># ret = re.match(&#x27;.&#x27;, text)</span></span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \d匹配任意的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \D匹配任意非数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \s匹配的是空白字符(\n,\t,\r\n window下换行,空格)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \S匹配的为非空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \w匹配的a-zA-Z,数字及下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \W匹配的和\w相反</span></span><br><span class="line">text = <span class="string">&#x27;+abc&#x27;</span></span><br><span class="line">ret = re.match(<span class="string">&#x27;\W&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># []组合的方式，只要满足括号内某一项就可以匹配成功</span></span><br></pre></td></tr></table></figure>
<h2 id="多字符的匹配"><a href="#多字符的匹配" class="headerlink" title="多字符的匹配"></a>多字符的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># * 匹配0个或多个字符</span></span><br><span class="line">text = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\w*&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># + 匹配一个或多个</span></span><br><span class="line"><span class="comment"># text = &#x27;+abc&#x27;</span></span><br><span class="line"><span class="comment"># result = re.match(&#x27;\w+&#x27;, text)</span></span><br><span class="line"><span class="comment"># print(result.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ？匹配0个或一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;m&#125; 匹配m个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;m,n&#125;匹配m-n之间个数的字符</span></span><br><span class="line">text = <span class="string">&#x27;3+2abc&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\w&#123;1,3&#125;&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>
<h2 id="开始和结束字符串的匹配"><a href="#开始和结束字符串的匹配" class="headerlink" title="开始和结束字符串的匹配"></a>开始和结束字符串的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 匹配开始字符</span></span><br><span class="line">text = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">result = re.search(<span class="string">&#x27;Wo&#x27;</span>, text)</span><br><span class="line"><span class="comment"># result1 = re.match(&#x27;Wo&#x27;, text)</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># print(result1.group())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $ 匹配结束字符</span></span><br><span class="line">text = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;Hello&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># | 匹配多个字符或表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪或者非贪婪</span></span><br><span class="line">text = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\d+?&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取html中标签</span></span><br><span class="line">text = <span class="string">&#x27;&lt;h1&gt;这是一个标题&lt;/h1&gt;&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;&lt;.+&gt;&#x27;</span>, text) <span class="comment"># 贪婪模式</span></span><br><span class="line"><span class="comment"># result = re.match(&#x27;&lt;.+?&gt;&#x27;, text) # 非贪婪模式</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证一个字符是不是0-100之间的数字 0 1 23 99</span></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个数：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line"><span class="comment"># num = &#x27;25&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;0$|[1-9]\d?$|100$&#x27;</span>, num)</span><br><span class="line"><span class="comment"># print(type(result))</span></span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你输入的是1-100的数:&#x27;</span>, result.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你输入的不是1-100之间的数&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="转义字符和原生字符串的匹配"><a href="#转义字符和原生字符串的匹配" class="headerlink" title="转义字符和原生字符串的匹配"></a>转义字符和原生字符串的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># python中的转义字符,加\</span></span><br><span class="line">text = <span class="string">&#x27;Hello\\nWorld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则中的转义字符,加\</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = re.findall(<span class="string">&#x27;\$\d+&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生字符和正则表达式</span></span><br><span class="line"><span class="comment"># 先在python中解析，再在正则中解析</span></span><br><span class="line">s = <span class="string">&#x27;\cdac&#x27;</span></span><br><span class="line">result = re.match(<span class="string">r&#x27;\\c&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>
<h2 id="分组、re模块常用函数"><a href="#分组、re模块常用函数" class="headerlink" title="分组、re模块常用函数"></a>分组、re模块常用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;.+(\$\d+).+(\$\d+)&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result.groups())</span><br><span class="line"></span><br><span class="line"><span class="comment"># group(0)或group()匹配整个字符串</span></span><br><span class="line"><span class="comment"># group(1)匹配第一个分组</span></span><br><span class="line"><span class="comment"># group(2)匹配第二个分组</span></span><br><span class="line"><span class="comment"># groups()匹配所有的分组</span></span><br><span class="line"><span class="comment"># findall()方法,返回的为一个列表</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = re.findall(<span class="string">r&#x27;\$\d+&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub()方法,替换规则</span></span><br><span class="line">s = <span class="string">&#x27;apple is $34, range is $78&#x27;</span></span><br><span class="line">result = s.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># result = re.sub(r&#x27; |,&#x27;, &#x27;|&#x27;, s)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是一个p段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">result = re.sub(<span class="string">r&#x27;&lt;.+?&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, html)</span><br><span class="line"><span class="built_in">print</span>(result.strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给正则表达式加注释,使用compile函数编译正则规则</span></span><br><span class="line">s = <span class="string">&#x27;apple is 35.59&#x27;</span></span><br><span class="line">r = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\d+ # 匹配一个数字</span></span><br><span class="line"><span class="string">\.? # 匹配一个小数点</span></span><br><span class="line"><span class="string">\d* # 匹配小数部分</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, re.VERBOSE)</span><br><span class="line">result = re.search(r, s)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="验证可能要爬取得数据类型，手机号码、邮箱、身份证，url"><a href="#验证可能要爬取得数据类型，手机号码、邮箱、身份证，url" class="headerlink" title="验证可能要爬取得数据类型，手机号码、邮箱、身份证，url"></a>验证可能要爬取得数据类型，手机号码、邮箱、身份证，url</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 验证手机号码</span></span><br><span class="line">text = <span class="string">&#x27;133456789015&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;1[34578]\d&#123;9&#125;&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证邮箱</span></span><br><span class="line">text = <span class="string">&#x27;sdfsf@qq.com&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\w+@[a-z0-9]+\.[a-z]+&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证url，http、https、ftp</span></span><br><span class="line">text = <span class="string">&#x27;https://www.baidu.com/s?wd=compile&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;(https|http|ftp)://\S+&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证身份证</span></span><br><span class="line">text = <span class="string">&#x27;11234567891234567z&#x27;</span></span><br><span class="line">result = re.match(<span class="string">&#x27;\d&#123;17&#125;[\dxX]&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接数据库</title>
    <url>/python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>爬虫中储存数据的四种方式，有json，csv，excel，mysql数据库等方式。</p>
<span id="more"></span>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment"># 连接数据库,参数有主机，端口，用户名，密码，数据表，编码方式,</span></span><br><span class="line">conn= pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, port=<span class="number">3306</span>, password=<span class="string">&#x27;password&#x27;</span>, database=<span class="string">&#x27;csdn_crawler&#x27;</span>)</span><br><span class="line">cusor = conn.cursor()</span><br></pre></td></tr></table></figure>
<h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询，增删改查通过cusor来操作</span></span><br><span class="line">sql = <span class="string">&#x27;select id, title from article&#x27;</span></span><br><span class="line">result = cusor.execute(sql)</span><br><span class="line">result = cusor.fetchone()</span><br><span class="line"><span class="comment"># result = cusor.fetchall()</span></span><br><span class="line"><span class="comment"># result = cusor.fetchmany(2)</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="插入数据库"><a href="#插入数据库" class="headerlink" title="插入数据库"></a>插入数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="comment"># sql = &quot;insert into article (id, title, content) values (null, &#x27;dgj&#x27;, &#x27;dgj zr&#x27;)&quot;</span></span><br><span class="line">sql = <span class="string">&quot;insert into article (id, title, content) values (null, %s, %s)&quot;</span></span><br><span class="line">title = <span class="string">&#x27;zr&#x27;</span></span><br><span class="line">content = <span class="string">&#x27;zr dgj&#x27;</span></span><br><span class="line">cusor.execute(sql, (title, content))</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">sql = <span class="string">&quot;delete from article where id = 1&quot;</span></span><br><span class="line">cusor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新数据库</span></span><br><span class="line">sql = <span class="string">&quot;update article set title=&#x27;丁梓翊&#x27; where id=2&quot;</span></span><br><span class="line">cusor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
